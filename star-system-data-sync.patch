commit b90f6a87447d2d915b8ebf91c7a0f2c6d55a6f93
Author: UI) ChenZt <chenzt.fnst@cn.fujitsu.com>
Date:   Thu Jul 23 18:23:14 2020 +0800

    Star system data sync.

diff --git a/app/src/main/java/com/ellison/eigakensaku/application/DebugMovieApplication.java b/app/src/main/java/com/ellison/eigakensaku/application/DebugMovieApplication.java
index d9dc9aa..f005c8d 100755
--- a/app/src/main/java/com/ellison/eigakensaku/application/DebugMovieApplication.java
+++ b/app/src/main/java/com/ellison/eigakensaku/application/DebugMovieApplication.java
@@ -1,5 +1,11 @@
 package com.ellison.eigakensaku.application;
 
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+
+import com.nostra13.universalimageloader.core.ImageLoader;
+import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
 import com.squareup.leakcanary.LeakCanary;
 import com.squareup.leakcanary.RefWatcher;
 
diff --git a/app/src/main/java/com/ellison/eigakensaku/application/MovieApplication.java b/app/src/main/java/com/ellison/eigakensaku/application/MovieApplication.java
index c4817a8..d1b52af 100755
--- a/app/src/main/java/com/ellison/eigakensaku/application/MovieApplication.java
+++ b/app/src/main/java/com/ellison/eigakensaku/application/MovieApplication.java
@@ -5,6 +5,8 @@ import android.app.Application;
 import android.content.Context;
 import android.os.Bundle;
 
+import com.ellison.eigakensaku.star.StarSystem;
+import com.ellison.eigakensaku.utils.Utils;
 import com.nostra13.universalimageloader.core.ImageLoader;
 import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
 import com.squareup.leakcanary.LeakCanary;
@@ -13,7 +15,11 @@ import com.squareup.leakcanary.RefWatcher;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
+import java.io.File;
+
 public class MovieApplication extends Application {
+    private static  final String TAG = MovieApplication.class.getSimpleName();
+
     private static ImageLoader mImageLoader;
     private RefWatcher refWatcher;
 
@@ -51,10 +57,11 @@ public class MovieApplication extends Application {
 
     @Override
     public void onTerminate() {
+        Utils.logDebug(TAG, "onTerminate");
         super.onTerminate();
     }
 
-    public final static class EveryActivityLifecycleCallbacks implements ActivityLifecycleCallbacks{
+    private final static class EveryActivityLifecycleCallbacks implements ActivityLifecycleCallbacks{
         @Override
         public void onActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState) {
 
@@ -87,7 +94,8 @@ public class MovieApplication extends Application {
 
         @Override
         public void onActivityDestroyed(@NonNull Activity activity) {
-
+            Utils.logDebug(TAG, "onActivityDestroyed activity:" + activity);
+            StarSystem.getInstance(activity.getApplicationContext()).syncStarSystem();
         }
     }
 }
diff --git a/app/src/main/java/com/ellison/eigakensaku/beans/Movie.java b/app/src/main/java/com/ellison/eigakensaku/beans/Movie.java
index 2b448d9..3b950e6 100755
--- a/app/src/main/java/com/ellison/eigakensaku/beans/Movie.java
+++ b/app/src/main/java/com/ellison/eigakensaku/beans/Movie.java
@@ -1,5 +1,6 @@
 package com.ellison.eigakensaku.beans;
 
+import com.ellison.eigakensaku.utils.Utils;
 import com.google.gson.annotations.SerializedName;
 
 import java.io.Serializable;
@@ -8,6 +9,7 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 public class Movie implements Serializable {
+    private static final String TAG = Movie.class.getSimpleName();
     private static final long serialVersionUID = 7897981L;
 
     @SerializedName("Title")
@@ -64,8 +66,9 @@ public class Movie implements Serializable {
     @NonNull
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("");
-        sb.append("Movie[title:")
+        return new StringBuilder(300)
+                .append("Movie@" + Integer.toHexString(super.hashCode()))
+                .append("[title:")
                 .append(Title)
                 .append(", postUrl:")
                 .append(Poster)
@@ -75,22 +78,31 @@ public class Movie implements Serializable {
                 .append(Type)
                 .append(", imdb:")
                 .append(ID)
-                .append("]");
-        return sb.toString();
+                .append("]")
+                .toString();
+    }
+
+    @Override
+    public int hashCode() {
+        return getID().hashCode();
     }
 
     @Override
     public boolean equals(@Nullable Object obj) {
+        Utils.logDebug(TAG, "equals this:" + this + " target:" + obj);
+
         if (this == obj) {
+            Utils.logDebug(TAG, "equals ==");
             return true;
         }
 
         if (obj instanceof Movie) {
             Movie temp = (Movie) obj;
 
-            if ((temp.getID() != null && temp.getID().equals(getID()))
-                    || (temp.getTitle() != null && temp.getTitle().equals(getTitle())
-                            && temp.getPoster() != null && temp.getPoster().equals(getPoster()))) {
+            if (temp.getID() != null && temp.getID().equals(getID())) {
+                Utils.logDebug(TAG, "equals equals");
+//                    || (temp.getTitle() != null && temp.getTitle().equals(getTitle())
+//                            && temp.getPoster() != null && temp.getPoster().equals(getPoster()))) {
                 return true;
             }
         }
diff --git a/app/src/main/java/com/ellison/eigakensaku/beans/MovieList.java b/app/src/main/java/com/ellison/eigakensaku/beans/MovieList.java
index 7e0631f..8bbbab7 100755
--- a/app/src/main/java/com/ellison/eigakensaku/beans/MovieList.java
+++ b/app/src/main/java/com/ellison/eigakensaku/beans/MovieList.java
@@ -2,6 +2,7 @@ package com.ellison.eigakensaku.beans;
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.List;
 
 import androidx.annotation.NonNull;
 
@@ -12,6 +13,10 @@ public class MovieList extends ArrayList<Movie> implements Serializable {
         super();
     }
 
+    public MovieList(List<Movie> movieList) {
+        super(movieList);
+    }
+
     @NonNull
     @Override
     public String toString() {
diff --git a/app/src/main/java/com/ellison/eigakensaku/constants/Constants.java b/app/src/main/java/com/ellison/eigakensaku/constants/Constants.java
index 9518aff..97862dd 100755
--- a/app/src/main/java/com/ellison/eigakensaku/constants/Constants.java
+++ b/app/src/main/java/com/ellison/eigakensaku/constants/Constants.java
@@ -48,6 +48,8 @@ public class Constants {
 
     public static final String BUNDLE_KEY_MOVIES_SAVED_LIST = "movie_saved_list";
     public static final String MOVIES_SAVED_SERIALED_FILE = "movie_saved";
+    public static final String MOVIES_STARRED_SERIALED_FILE = "movie_starred";
+    public static final int MOVIES_STARRED_SERIALED_SIZE_CAPACITY = 50;
 
     public static final float SWIPE_SHOW_MENU_THRESHOLD_FOR_SEARCH = 0.45f;
     public static final float SWIPE__MENU_SELECTED_TRANSITION_Z = 10f;
diff --git a/app/src/main/java/com/ellison/eigakensaku/glide/ImageRequestListener.java b/app/src/main/java/com/ellison/eigakensaku/glide/ImageRequestListener.java
index 6a0dbd7..c06e94f 100755
--- a/app/src/main/java/com/ellison/eigakensaku/glide/ImageRequestListener.java
+++ b/app/src/main/java/com/ellison/eigakensaku/glide/ImageRequestListener.java
@@ -5,6 +5,7 @@ import android.util.Log;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.request.target.Target;
+import com.ellison.eigakensaku.utils.Utils;
 
 import androidx.annotation.Nullable;
 
@@ -13,12 +14,13 @@ public class ImageRequestListener implements com.bumptech.glide.request.RequestL
 
     @Override
     public boolean onLoadFailed(@Nullable GlideException e, Object model, Target target, boolean isFirstResource) {
-        Log.e(TAG, "onLoadFailed e:" + e + " model:" + model + " target:" + target + " isFirstResource:" + isFirstResource);
+        Utils.logError(TAG, "onLoadFailed e:" + e + " model:" + model + " target:" + target + " isFirstResource:" + isFirstResource);
         return false;
     }
 
     @Override
     public boolean onResourceReady(Object resource, Object model, Target target, DataSource dataSource, boolean isFirstResource) {
+        Utils.logDebug(TAG, "onResourceReady resource:" + resource + " model:" + model + " target:" + target + " dataSource:" + dataSource + " isFirstResource:" + isFirstResource);
         return false;
     }
 }
diff --git a/app/src/main/java/com/ellison/eigakensaku/model/IMovieModel.java b/app/src/main/java/com/ellison/eigakensaku/model/IMovieModel.java
index b171ecb..93a0b4d 100755
--- a/app/src/main/java/com/ellison/eigakensaku/model/IMovieModel.java
+++ b/app/src/main/java/com/ellison/eigakensaku/model/IMovieModel.java
@@ -1,5 +1,11 @@
 package com.ellison.eigakensaku.model;
 
+import android.content.Context;
+
+import com.ellison.eigakensaku.beans.Movie;
+
 public interface IMovieModel {
     void searchMovie(String keywords, int pageIndex);
+    void starMovie(Movie movie, boolean isStarred, Context context);
+    boolean isMovieStarred(Movie movie, Context context);
 }
diff --git a/app/src/main/java/com/ellison/eigakensaku/model/MovieModel.java b/app/src/main/java/com/ellison/eigakensaku/model/MovieModel.java
index b11749d..8a553bd 100755
--- a/app/src/main/java/com/ellison/eigakensaku/model/MovieModel.java
+++ b/app/src/main/java/com/ellison/eigakensaku/model/MovieModel.java
@@ -1,14 +1,19 @@
 package com.ellison.eigakensaku.model;
 
+import android.content.Context;
 import android.util.Log;
 
+import com.ellison.eigakensaku.beans.Movie;
 import com.ellison.eigakensaku.beans.MovieList;
 import com.ellison.eigakensaku.http.HttpManager;
 import com.ellison.eigakensaku.http.IMovieRequestCallback;
 import com.ellison.eigakensaku.presenter.IMovieListener;
+import com.ellison.eigakensaku.star.StarSystem;
 import com.ellison.eigakensaku.subscribers.MovieSearcheSubscribers;
+import com.ellison.eigakensaku.utils.Utils;
 
 public class MovieModel implements IMovieModel, IMovieRequestCallback {
+    private static final String TAG = MovieModel.class.getSimpleName();
     private final IMovieListener mMovieListener;
 
     public MovieModel(IMovieListener movieListener) {
@@ -17,12 +22,24 @@ public class MovieModel implements IMovieModel, IMovieRequestCallback {
 
     @Override
     public void searchMovie(String keywords, int pageIndex) {
-        Log.d("ellison", "searchMovie() keywords:" + keywords + " pageIndex:" + pageIndex);
+        Utils.logDebug(TAG, "searchMovie() keywords:" + keywords + " pageIndex:" + pageIndex);
         HttpManager.getInstance().requestMovieList(keywords, pageIndex, new MovieSearcheSubscribers(mMovieListener, keywords, pageIndex));
         // HttpManager.getInstance().requestMovieList(keywords, pageIndex, this);
     }
 
     @Override
+    public void starMovie(Movie movie, boolean isStarred, Context context) {
+        Utils.logDebug(TAG, "starMovie movie:" + movie + " isStarred:" + isStarred);
+        StarSystem.getInstance(context).starMoive(movie, isStarred);
+    }
+
+    @Override
+    public boolean isMovieStarred(Movie movie, Context context) {
+        Utils.logDebug(TAG, "isMovieStarred movie:" + movie);
+        return StarSystem.getInstance(context).isMoiveStarred(movie);
+    }
+
+    @Override
     public void onRequestSucceed(String keywords, MovieList list, int pageIndex) {
         if (mMovieListener != null) {
             mMovieListener.onMovieSucceed(keywords, list, pageIndex);
diff --git a/app/src/main/java/com/ellison/eigakensaku/presenter/IMoviePresenter.java b/app/src/main/java/com/ellison/eigakensaku/presenter/IMoviePresenter.java
index bee932b..e74f950 100755
--- a/app/src/main/java/com/ellison/eigakensaku/presenter/IMoviePresenter.java
+++ b/app/src/main/java/com/ellison/eigakensaku/presenter/IMoviePresenter.java
@@ -1,5 +1,11 @@
 package com.ellison.eigakensaku.presenter;
 
+import android.content.Context;
+
+import com.ellison.eigakensaku.beans.Movie;
+
 public interface IMoviePresenter {
     void searchMovie(String keywords, int pageIndex);
+    void starMovie(Movie movie, boolean isStarred, Context context);
+    boolean isMovieStarred(Movie movie, Context context);
 }
diff --git a/app/src/main/java/com/ellison/eigakensaku/presenter/MoviePresenter.java b/app/src/main/java/com/ellison/eigakensaku/presenter/MoviePresenter.java
index ff7ea22..1f48091 100755
--- a/app/src/main/java/com/ellison/eigakensaku/presenter/MoviePresenter.java
+++ b/app/src/main/java/com/ellison/eigakensaku/presenter/MoviePresenter.java
@@ -1,5 +1,8 @@
 package com.ellison.eigakensaku.presenter;
 
+import android.content.Context;
+
+import com.ellison.eigakensaku.beans.Movie;
 import com.ellison.eigakensaku.constants.Constants;
 import com.ellison.eigakensaku.model.IMovieModel;
 import com.ellison.eigakensaku.model.MovieModel;
@@ -26,6 +29,18 @@ public class MoviePresenter implements IMoviePresenter, IMovieListener {
     }
 
     @Override
+    public void starMovie(Movie movie, boolean isStarred, Context context) {
+        if (mMovieModel != null) {
+            mMovieModel.starMovie(movie, isStarred, context);
+        }
+    }
+
+    @Override
+    public boolean isMovieStarred(Movie movie, Context context) {
+        return  mMovieModel == null ? false : mMovieModel.isMovieStarred(movie, context);
+    }
+
+    @Override
     public void onMovieSucceed(String keywords, MovieList list, int pageIndex) {
         if (mMovieView != null) {
             if (pageIndex <= Constants.GET_REQUEST_NO_PAGE_INDEX + 1) {
diff --git a/app/src/main/java/com/ellison/eigakensaku/star/StarSystem.java b/app/src/main/java/com/ellison/eigakensaku/star/StarSystem.java
new file mode 100644
index 0000000..7eaf275
--- /dev/null
+++ b/app/src/main/java/com/ellison/eigakensaku/star/StarSystem.java
@@ -0,0 +1,134 @@
+package com.ellison.eigakensaku.star;
+
+import android.content.Context;
+
+import com.ellison.eigakensaku.beans.Movie;
+import com.ellison.eigakensaku.constants.Constants;
+import com.ellison.eigakensaku.utils.Utils;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedHashSet;
+import java.util.List;
+
+public class StarSystem {
+    private static final String TAG = StarSystem.class.getSimpleName();
+
+    private static StarSystem sInstance = null;
+    private LinkedHashSet<Movie> mCachedStarredMovie = null;
+    private Context sContext = null;
+
+    private StarSystem(Context context) {
+        sContext = context;
+        mCachedStarredMovie = readStarredMovie();
+    }
+
+    public static final StarSystem getInstance(Context context) {
+        if (sInstance == null) {
+            synchronized (StarSystem.class) {
+                if (sInstance == null) {
+                    sInstance = new StarSystem(context);
+                }
+            }
+        }
+        return sInstance;
+    }
+
+    public List<Movie> getStarredMoive() {
+        Utils.logDebug(TAG, "getStarredMoive mCachedStarredMovie:" + mCachedStarredMovie);
+
+        List<Movie> movieList = new ArrayList<>(mCachedStarredMovie);
+        Collections.reverse(movieList);
+        Utils.logDebug(TAG, "getStarredMoive movieList:" + movieList);
+        return movieList;
+    }
+
+    public boolean isMoiveStarred(Movie movie) {
+        Utils.logDebug(TAG, "isMoiveStarred movie:" + movie);
+        return mCachedStarredMovie == null ? false : mCachedStarredMovie.contains(movie);
+    }
+
+    public void starMoive(Movie movie, boolean isStarred) {
+        Utils.logDebug(TAG, "starMoive movie:" + movie + " isStarred:" + isStarred);
+        if (mCachedStarredMovie != null) {
+            boolean starringResult = isStarred ? mCachedStarredMovie.add(movie) : mCachedStarredMovie.remove(movie);
+        } else {
+            Utils.logError(TAG, "starMoive CACHED FILE NULL & NOTH");
+        }
+    }
+
+    public void syncStarSystem() {
+        if (mCachedStarredMovie == null || mCachedStarredMovie.size() == 0) {
+            Utils.logError(TAG, "syncStarSystem CACHED SET NULL/EMPTY & NOTH");
+            return;
+        }
+
+        writeStarredMovie(mCachedStarredMovie);
+    }
+
+    private LinkedHashSet<Movie> readStarredMovie() {
+        Utils.logDebug(TAG, "readStarredMovie sContext:" + sContext);
+        if (sContext == null) {
+            return null;
+        }
+
+        File starredFile = new File(sContext.getFilesDir() + File.separator + Constants.MOVIES_STARRED_SERIALED_FILE);
+        ObjectInputStream objectInputStream = null;
+        LinkedHashSet<Movie> readStarredMovie = null;
+
+        try {
+            objectInputStream = new ObjectInputStream(new FileInputStream(starredFile));
+            readStarredMovie = (LinkedHashSet<Movie>) objectInputStream.readObject();
+        } catch (IOException e) {
+            Utils.logError(TAG, "readStarredMovie IOException:" + e);
+        } catch (ClassNotFoundException e) {
+            Utils.logError(TAG, "readStarredMovie ClassNotFoundException:" + e);
+        } finally {
+            try {
+                if (objectInputStream != null) {
+                    objectInputStream.close();
+                }
+            } catch (IOException e) {
+            }
+        }
+
+        Utils.logDebug(TAG, "readStarredMovie RESULT:" + readStarredMovie);
+
+        if (readStarredMovie == null) {
+            readStarredMovie = new LinkedHashSet<Movie>(Constants.MOVIES_STARRED_SERIALED_SIZE_CAPACITY);
+            Utils.logDebug(TAG, "readStarredMovie NULL & INIT RESULT:" + readStarredMovie);
+        }
+
+        return readStarredMovie;
+    }
+
+    private void writeStarredMovie(LinkedHashSet<Movie> movieSet) {
+        Utils.logDebug(TAG, "writeStarredMovie movieSet:" + movieSet + " sContext:" + sContext);
+        if (sContext == null) {
+            return;
+        }
+
+        File starredFile = new File(sContext.getFilesDir() + File.separator + Constants.MOVIES_STARRED_SERIALED_FILE);
+        ObjectOutputStream objectOutputStream = null;
+
+        try {
+            objectOutputStream = new ObjectOutputStream(new FileOutputStream(starredFile));
+            objectOutputStream.writeObject(movieSet);
+        } catch (IOException e) {
+            Utils.logError(TAG, "writeStarredMovie IOException:" + e);
+        } finally {
+            try {
+                if (objectOutputStream != null) {
+                    objectOutputStream.close();
+                }
+            } catch (IOException e) {
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/animator/AnimatorShowerImplement.java b/app/src/main/java/com/ellison/eigakensaku/ui/animator/AnimatorShowerImplement.java
index ff5405d..3a7051c 100755
--- a/app/src/main/java/com/ellison/eigakensaku/ui/animator/AnimatorShowerImplement.java
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/animator/AnimatorShowerImplement.java
@@ -208,21 +208,21 @@ public class AnimatorShowerImplement implements IAnimatorShower {
         // Change svg when 1/2 played.
         xAnimator.addUpdateListener(animation -> {
             float fraction = animation.getAnimatedFraction();
-            Utils.logDebug(TAG, "update fraction:" + fraction);
+            // Utils.logDebug(TAG, "update fraction:" + fraction);
 
             if (view instanceof ImageView) {
                 final ImageView iv = (ImageView) view;
                 if (fraction > Constants.STAR_CHANGE_SCALE_FRACTION_THRESHOLD) {
                      if (!isStarring) {
                         iv.setImageResource(R.drawable.ic_frag_star_new_like);
-                        Utils.logDebug(TAG, "update like");
+                        // Utils.logDebug(TAG, "update like");
                     }
                 }
 
                 if (fraction > Constants.STAR_CHANGE_SCALE_FRACTION_THRESHOLD) {
                     if (isStarring) {
                         iv.setImageResource(R.drawable.ic_frag_star_new_liked);
-                        Utils.logDebug(TAG, "update liked");
+                        // Utils.logDebug(TAG, "update liked");
                     }
                 }
             }
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/search/SearchFragment.java b/app/src/main/java/com/ellison/eigakensaku/ui/search/SearchFragment.java
index 1802753..e5c9c3d 100755
--- a/app/src/main/java/com/ellison/eigakensaku/ui/search/SearchFragment.java
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/search/SearchFragment.java
@@ -54,7 +54,7 @@ public class SearchFragment extends BaseFragment
         TextWatcher,
         SwipeRefreshLayout.OnRefreshListener,
         IAnimatorCallback,
-        MovieAdapter.ILoadMoreListener {
+        MovieAdapter.IDataUpdateCallback {
     private static final String TAG = SearchFragment.class.getSimpleName();
 
     private String mKeywords;
@@ -107,7 +107,7 @@ public class SearchFragment extends BaseFragment
         Utils.logDebug(TAG, this + " initRecyclerView()");
         StaggeredGridLayoutManager sgLM = new StaggeredGridLayoutManager(Constants.MOVIE_LIST_ROW_NUMBER, StaggeredGridLayoutManager.VERTICAL);
         mMovieAdapter = new MovieAdapter(getActivity());
-        mMovieAdapter.setILoadMoreListener(this);
+        mMovieAdapter.setIDataUpdateCallback(this);
         MovieItemDecoration decoration = new MovieItemDecoration(Constants.MOVIE_LIST_ITEM_SPACE);
         ItemSwipeCallback touchCallback = new ItemSwipeCallback();
         ItemTouchHelper touchHelper = new ItemTouchHelper(touchCallback);
@@ -263,6 +263,7 @@ public class SearchFragment extends BaseFragment
         }
     }
 
+    @Override
     public void onLoadMoreClicked(int moreIndex) {
         if (!ensureKeywordNotNull()) {
             new Handler().postDelayed(
@@ -273,6 +274,20 @@ public class SearchFragment extends BaseFragment
         searchMovieRequest(moreIndex);
     }
 
+    @Override
+    public boolean isItemStarred(Movie movie) {
+        Utils.logDebug(TAG, "isItemStarred movie:" + movie);
+        return mMoviePresenter == null ? false : mMoviePresenter.isMovieStarred(movie, getActivity().getApplicationContext());
+    }
+
+    @Override
+    public void onItemStarred(Movie movie, boolean isStarred) {
+        Utils.logDebug(TAG, "onItemStarred movie:" + movie + " isStarred:" + isStarred);
+        if (mMoviePresenter != null) {
+            mMoviePresenter.starMovie(movie, isStarred, getActivity().getApplicationContext());
+        }
+    }
+
     public void updateFAButton(String string) {
         if (string != null && !string.isEmpty()) {
             if (mKeywords == null || mKeywords.isEmpty()) {
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/star/StarFragment.java b/app/src/main/java/com/ellison/eigakensaku/ui/star/StarFragment.java
index 5d7d379..7a05486 100755
--- a/app/src/main/java/com/ellison/eigakensaku/ui/star/StarFragment.java
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/star/StarFragment.java
@@ -7,14 +7,26 @@ import android.view.ViewGroup;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import butterknife.BindView;
+import butterknife.ButterKnife;
 
 import com.ellison.eigakensaku.R;
+import com.ellison.eigakensaku.beans.Movie;
+import com.ellison.eigakensaku.beans.MovieList;
+import com.ellison.eigakensaku.star.StarSystem;
 import com.ellison.eigakensaku.ui.base.BaseFragment;
+import com.ellison.eigakensaku.utils.Utils;
+
+import java.util.List;
 
 public class StarFragment extends BaseFragment {
-    @BindView(R.id.text_star)
-    TextView mWarn;
+    private static final String TAG = StarFragment.class.getSimpleName();
+
+    @BindView(R.id.star_frag_rv)
+    RecyclerView mStarsView;
 
     public View onCreateView(@NonNull LayoutInflater inflater,
                              ViewGroup container, Bundle savedInstanceState) {
@@ -26,8 +38,17 @@ public class StarFragment extends BaseFragment {
     protected void init(Bundle savedInstanceState) {
         super.init(savedInstanceState);
 
-        if(mWarn != null) {
-            mWarn.setText(R.string.warning_starred_movie_none);
+        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity());
+        StarredMovieAdapter adapter = new StarredMovieAdapter(getActivity());
+
+        if (mStarsView != null) {
+            mStarsView.setLayoutManager(linearLayoutManager);
+            mStarsView.setAdapter(adapter);
         }
+
+        MovieList list = new MovieList(StarSystem.getInstance(getActivity().getApplicationContext()).getStarredMoive());
+        Utils.logDebug(TAG, "init list:" + list);
+
+        adapter.updateMovies(list);
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/star/StarredMovieAdapter.java b/app/src/main/java/com/ellison/eigakensaku/ui/star/StarredMovieAdapter.java
new file mode 100755
index 0000000..d7603c2
--- /dev/null
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/star/StarredMovieAdapter.java
@@ -0,0 +1,165 @@
+package com.ellison.eigakensaku.ui.star;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
+import com.bumptech.glide.request.RequestOptions;
+import com.ellison.eigakensaku.R;
+import com.ellison.eigakensaku.beans.Movie;
+import com.ellison.eigakensaku.beans.MovieList;
+import com.ellison.eigakensaku.glide.ImageRequestListener;
+import com.ellison.eigakensaku.ui.touch.ISwipeDataSync;
+import com.ellison.eigakensaku.ui.touch.ITouchDataSync;
+import com.ellison.eigakensaku.utils.Utils;
+
+public class StarredMovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements ITouchDataSync {
+    private static final String TAG = StarredMovieAdapter.class.getSimpleName();
+    private Context mContext;
+    private MovieList mMovies;
+    private IStarredMoiveOperationCallback iStarredMoiveOperationCallback;
+    private LoadMoreState mState = LoadMoreState.COMPLETED;
+    private int mCurrentPage = 0;
+
+    public interface IStarredMoiveOperationCallback {
+        void onItemRemoved(Movie movie);
+        void onItemSwap(Movie before, Movie after);
+    }
+
+    public void setIStarredMoiveOperationCallback(IStarredMoiveOperationCallback listener) {
+        iStarredMoiveOperationCallback = listener;
+    }
+
+    public enum LoadMoreState {
+        LOADING, COMPLETED, END
+    }
+
+    private void updateLoadingState(LoadMoreState state){
+        mState = state;
+    }
+
+    public StarredMovieAdapter(Context context) {
+        super();
+
+        mContext = context;
+        mMovies = new MovieList();
+    }
+
+    public void updateMovies(MovieList list) {
+        updateMovies(list, false);
+    }
+
+    public void updateMovies(MovieList list, boolean isLoadMore) {
+        if (list == null) {
+            if (!isLoadMore) {
+                mMovies.clear();
+                mCurrentPage = 0;
+            }
+            updateLoadingState(LoadMoreState.COMPLETED);
+        } else if (mMovies != null) {
+            if (!isLoadMore) {
+                mMovies.clear();
+                mCurrentPage = 1;
+                updateLoadingState(LoadMoreState.COMPLETED);
+            } else {
+                if (list.isEmpty()) {
+                    updateLoadingState(LoadMoreState.END);
+                } else {
+                    mCurrentPage++;
+                    updateLoadingState(LoadMoreState.COMPLETED);
+                }
+            }
+            mMovies.addAll(list);
+        } else {
+            mMovies = list;
+            mCurrentPage = 1;
+            updateLoadingState(LoadMoreState.COMPLETED);
+        }
+
+        notifyDataSetChanged();
+    }
+
+    public MovieList getMovies() {
+        return mMovies;
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        View itemView = LayoutInflater.from(mContext).inflate(R.layout.starred_rv_item_layout, parent, false);
+        return new StarredMovieHolder(itemView, this);
+    }
+
+    @Override
+    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
+        Utils.logDebug(TAG, "onBindViewHolder() holder:" + holder + " pos:" + position);
+
+        if (holder instanceof StarredMovieHolder) {
+            Movie movie = mMovies.get(position);
+            StarredMovieHolder movieHolder = (StarredMovieHolder) holder;
+            Log.d(TAG, "Movie[" + position + "]:" + movie);
+
+            // Show post With Glide
+            RequestOptions options = new RequestOptions()
+                    .format(DecodeFormat.PREFER_ARGB_8888)
+                    .placeholder(R.drawable.rv_item_post_place_holder_img)
+                    .override(100, 150)
+                    .error(R.drawable.rv_item_post_place_holder_error_emoji);
+
+            Glide.with(mContext)
+                    .load(movie.getPoster())
+                    .apply(options)
+                    .transition(DrawableTransitionOptions.withCrossFade())
+                    .listener(new ImageRequestListener())
+                    .into(movieHolder.post);
+
+            // Show title
+            movieHolder.title.setText(movie.getTitle());
+
+            // Show year
+            movieHolder.year.setText(movie.getYear());
+
+            // Show type
+            movieHolder.type.setText(movie.getType());
+
+            // show actor
+
+            // show country
+
+            // show info
+        }
+    }
+
+    @Override
+    public long getItemId(int position) {
+        return super.getItemId(position);
+    }
+
+    @Override
+    public int getItemCount() {
+        return mMovies.size();
+    }
+
+    @Override
+    public void onItemRemoved(int pos) {
+        Utils.logDebug(TAG, "onItemRemoved() pos:" + pos);
+        if (iStarredMoiveOperationCallback != null) {
+            iStarredMoiveOperationCallback.onItemRemoved(mMovies.get(pos));
+        }
+    }
+
+    @Override
+    public void onItemSwap(int before, int after) {
+        Utils.logDebug(TAG, "onItemSwap() before:" + before + " after:" + after);
+        if (iStarredMoiveOperationCallback != null) {
+            iStarredMoiveOperationCallback.onItemSwap(mMovies.get(before), mMovies.get(after));
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/star/StarredMovieHolder.java b/app/src/main/java/com/ellison/eigakensaku/ui/star/StarredMovieHolder.java
new file mode 100755
index 0000000..cf20793
--- /dev/null
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/star/StarredMovieHolder.java
@@ -0,0 +1,151 @@
+package com.ellison.eigakensaku.ui.star;
+
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.ellison.eigakensaku.R;
+import com.ellison.eigakensaku.constants.Constants;
+import com.ellison.eigakensaku.ui.animator.AnimatorShowerImplement;
+import com.ellison.eigakensaku.ui.animator.AnimatorType;
+import com.ellison.eigakensaku.ui.animator.IAnimatorCallback;
+import com.ellison.eigakensaku.ui.touch.ITouchDataSync;
+import com.ellison.eigakensaku.ui.touch.ISwipeGestureListener;
+import com.ellison.eigakensaku.utils.Utils;
+
+import java.lang.ref.WeakReference;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class StarredMovieHolder extends RecyclerView.ViewHolder implements ISwipeGestureListener {
+    private static final String TAG = StarredMovieHolder.class.getSimpleName();
+    private WeakReference<ITouchDataSync> touchDataSync;
+
+    @BindView(R.id.star_main_content)
+    View itemView;
+    @BindView(R.id.star_tv_title)
+    TextView title;
+    @BindView(R.id.star_iv_post)
+    ImageView post;
+    @BindView(R.id.star_tv_year)
+    TextView year;
+    @BindView(R.id.star_tv_type)
+    TextView type;
+    @BindView(R.id.star_tv_actor)
+    TextView actor;
+    @BindView(R.id.star_tv_country)
+    TextView country;
+    @BindView(R.id.star_tv_info)
+    TextView info;
+    @BindView(R.id.star_remove_tip)
+    TextView star_tip;
+    @BindView(R.id.star_remove_icon)
+    ImageView star_icon;
+
+    public StarredMovieHolder(@NonNull View itemView, ITouchDataSync sync) {
+        super(itemView);
+        ButterKnife.bind(this, itemView);
+        touchDataSync = new WeakReference<>(sync);
+    }
+
+    @Override
+    public void onSwipeTipShowing(float dX, float dY) {
+        final int menuWidth = ((ViewGroup) itemView).getChildAt(1).getWidth();
+        Utils.logDebug(TAG, "onStarMenuShowing() itemWidth:" + itemView.getWidth() + " menuWidth:" + menuWidth);
+
+        if (Math.abs(dX) <= menuWidth) {
+            // Scroll until view totally show
+            viewScrollTo(itemView, (int) Math.abs(dX), 0);
+            Utils.logDebug(TAG, "onStarMenuShowing() scrollTo:-" +  Math.abs(dX));
+        } else {
+            Utils.logDebug(TAG, "onStarMenuShowing() scroll over threshold & do NOTH");
+        }
+    }
+
+    @Override
+    public void onSwipeMenuShowing(ISwipeMenuCallback callback) {
+        updateVisibility(star_tip, View.INVISIBLE);
+        updateVisibility(star_icon, View.VISIBLE);
+
+        showStarAnimator(star_icon, true, new IAnimatorCallback() {
+            @Override
+            public void onAnimationStart() {
+            }
+
+            @Override
+            public void onAnimationEnd() {
+                if (callback != null) {
+//                    Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd SCROLL RESET");
+//                    viewScrollTo(itemView, 0, 0);
+
+//                    Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd ANIMATION RESET");
+//                    callback.onSwipeMenuShown();
+
+                    if (touchDataSync.get() != null) {
+                        Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd STAR SYNC");
+                        touchDataSync.get().onItemRemoved(getAdapterPosition());
+                    }
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onSwipeMenuSelected() {
+        updateTransitionZ(itemView, Constants.SWIPE__MENU_SELECTED_TRANSITION_Z);
+        updateVisibility(star_tip, View.VISIBLE);
+        updateVisibility(star_icon, View.INVISIBLE);
+    }
+
+    @Override
+    public void onSwipeMenuCleared() {
+        updateTransitionZ(itemView, Constants.SWIPE__MENU_UNSELECTED_TRANSITION_Z);
+        updateVisibility(star_tip, View.VISIBLE);
+        updateVisibility(star_icon, View.INVISIBLE);
+    }
+
+    private void updateTextView(TextView view, int id) {
+        if (view == null) {
+            return;
+        }
+        Utils.logDebug(TAG, "updateTextView() view:" + view);
+        view.setText(id);
+    }
+
+    private void viewScrollTo(View view, int x, int y) {
+        if (view == null) {
+            return;
+        }
+        Utils.logDebug(TAG, "viewScrollTo() view:" + view + " x:" + x + " y:" + y);
+        view.scrollTo(x, y);
+    }
+
+    private void showStarAnimator(View view, boolean isStarring, IAnimatorCallback callback) {
+        if (view == null) {
+            return;
+        }
+        Utils.logDebug(TAG, "showStarAnimator() view:" + view + " isStarring:" + isStarring + " callback:" + callback);
+        AnimatorShowerImplement.getInstance().showAnimator(view, isStarring ? AnimatorType.STARRING : AnimatorType.UNSTARRING, callback);
+    }
+
+    private void updateTransitionZ(View view, float z) {
+        if (view == null) {
+            return;
+        }
+        Utils.logDebug(TAG, "updateTransitionZ() view:" + view + " z:" + z);
+        view.setTranslationZ(z);
+    }
+
+    private void updateVisibility(View view, int visibility) {
+        if (view == null) {
+            return;
+        }
+        Utils.logDebug(TAG, "updateVisibility() view:" + view + " visibility:" + (visibility == View.VISIBLE ? "VISIBLE" : " INVISIBLE"));
+        view.setVisibility(visibility);
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/touch/ISwipeDataSync.java b/app/src/main/java/com/ellison/eigakensaku/ui/touch/ISwipeDataSync.java
new file mode 100644
index 0000000..1e14a1b
--- /dev/null
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/touch/ISwipeDataSync.java
@@ -0,0 +1,5 @@
+package com.ellison.eigakensaku.ui.touch;
+
+public interface ISwipeDataSync {
+    void onItemStarred(int pos, boolean isStarred);
+}
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/touch/ITouchDataSync.java b/app/src/main/java/com/ellison/eigakensaku/ui/touch/ITouchDataSync.java
new file mode 100644
index 0000000..5df050a
--- /dev/null
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/touch/ITouchDataSync.java
@@ -0,0 +1,6 @@
+package com.ellison.eigakensaku.ui.touch;
+
+public interface ITouchDataSync {
+    void onItemRemoved(int pos);
+    void onItemSwap(int before, int after);
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieAdapter.java b/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieAdapter.java
index 490b3fc..63f6345 100755
--- a/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieAdapter.java
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieAdapter.java
@@ -15,25 +15,29 @@ import com.ellison.eigakensaku.beans.Movie;
 import com.ellison.eigakensaku.beans.MovieList;
 import com.ellison.eigakensaku.constants.Constants;
 import com.ellison.eigakensaku.glide.ImageRequestListener;
+import com.ellison.eigakensaku.ui.touch.ISwipeDataSync;
+import com.ellison.eigakensaku.utils.Utils;
 
 import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.RecyclerView;
 import androidx.recyclerview.widget.StaggeredGridLayoutManager;
 
-public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements ISwipeDataSync {
     private static final String TAG = MovieAdapter.class.getSimpleName();
     private Context mContext;
     private MovieList mMovies;
-    private ILoadMoreListener iLoadMoreListener;
+    private IDataUpdateCallback iDataUpdateCallback;
     private LoadMoreState mState = LoadMoreState.COMPLETED;
     private int mCurrentPage = 0;
 
-    public interface ILoadMoreListener {
+    public interface IDataUpdateCallback {
         void onLoadMoreClicked(int index);
+        void onItemStarred(Movie movie, boolean isStarred);
+        boolean isItemStarred(Movie movie);
     }
 
-    public void setILoadMoreListener(ILoadMoreListener listener) {
-        iLoadMoreListener = listener;
+    public void setIDataUpdateCallback(IDataUpdateCallback listener) {
+        iDataUpdateCallback = listener;
     }
 
     public enum LoadMoreState {
@@ -95,7 +99,8 @@ public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>
 
         if (viewType == Constants.TYPE_RV_CONTENT) {
             itemView = LayoutInflater.from(mContext).inflate(R.layout.content_rv_item_layout, parent, false);
-            return new MovieHolder(itemView);
+            // return new MovieHolder(itemView);
+            return new MovieHolder(itemView, this);
         } else if (viewType == Constants.TYPE_RV_LOAD) {
             itemView = LayoutInflater.from(mContext).inflate(R.layout.load_rv_item_layout, parent, false);
             return new LoadingHodler(itemView);
@@ -106,6 +111,8 @@ public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>
 
     @Override
     public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
+        Utils.logDebug(TAG, "onBindViewHolder() holder:" + holder + " pos:" + position);
+
         if (holder instanceof MovieHolder) {
             Movie movie = mMovies.get(position);
             MovieHolder movieHolder = (MovieHolder) holder;
@@ -116,27 +123,45 @@ public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>
 
             // Show post
 
-            // With customized image loader
+            // 1, With customized image loader
             // EllisonImageDisplayer.getDisplayer(mContext).displayImage(holder.post, movie.getPoster());
 
-            // With UIL
-//            DisplayImageOptions options = new DisplayImageOptions.Builder()
-//                    .showImageOnFail(R.drawable.rv_item_post_place_holder_error)
-//                    .showImageOnLoading(R.drawable.rv_item_post_place_holder)
-//                    .build();
-//            MovieApplication.getImageLoader(mContext).displayImage(movie.getPoster(),
-//                    movieHolder.post,
-//                    options,
-//                    new ImageLoadCallback());
-
-            // With Glide
+            // 2, With UIL
+            /* DisplayImageOptions options = new DisplayImageOptions.Builder()
+                    .showImageOnFail(R.drawable.rv_item_post_place_holder_error)
+                    .showImageOnLoading(R.drawable.rv_item_post_place_holder)
+                    .build();
+            DebugMovieApplication.getImageLoader(mContext).displayImage(movie.getPoster(),
+                    movieHolder.post,
+                    options,
+                    new ImageLoadingListener() {
+                        @Override
+                        public void onLoadingStarted(String imageUri, View view) {
+                        }
+
+                        @Override
+                        public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
+                            Utils.logError(TAG, " url:" + imageUri + " failReason:" + failReason.getType() + " detail:", failReason.getCause());
+                        }
+
+                        @Override
+                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
+                        }
+
+                        @Override
+                        public void onLoadingCancelled(String imageUri, View view) {
+                        }
+                    });
+             */
+
+            // 3, With Glide
             RequestOptions options = new RequestOptions()
                     // .transform(new GrayscaleTransformation())
                     // .fitCenter()
                     // .placeholder(R.drawable.rv_item_post_place_holder)
                     .format(DecodeFormat.PREFER_ARGB_8888)
                     .placeholder(R.drawable.rv_item_post_place_holder_img)
-                    .override(200, 250)
+                    .override(200, 260)
                     // .override(Target.SIZE_ORIGINAL)
                     // .skipMemoryCache(true)
                     // .diskCacheStrategy(DiskCacheStrategy.NONE)
@@ -156,6 +181,9 @@ public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>
 
             // Show type
             movieHolder.type.setText(movie.getType());
+
+            // Show star
+            movieHolder.syncStarState(iDataUpdateCallback.isItemStarred(movie));
         } else if (holder instanceof LoadingHodler) {
             LoadingHodler loadingHodler = (LoadingHodler) holder;
             switch (mState) {
@@ -205,9 +233,9 @@ public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>
                         int[] last = new int[count];
                         ((StaggeredGridLayoutManager) layoutManager).findLastCompletelyVisibleItemPositions(last);
 
-                        if (last[0] == count - 1 && isSwipeUp && iLoadMoreListener != null) {
+                        if (last[0] == count - 1 && isSwipeUp && iDataUpdateCallback != null) {
                             // Do load more operation.
-                            iLoadMoreListener.onLoadMoreClicked(mCurrentPage + 1);
+                            iDataUpdateCallback.onLoadMoreClicked(mCurrentPage + 1);
                             updateLoadingState(LoadMoreState.LOADING);
                             notifyDataSetChanged();
                         }
@@ -254,4 +282,12 @@ public class MovieAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>
     public int getItemCount() {
         return mMovies.size() + 1;
     }
+
+    @Override
+    public void onItemStarred(int pos, boolean isStarred) {
+        Utils.logDebug(TAG, "onItemStarred() pos:" + pos + " isStarred:" + isStarred);
+        if (iDataUpdateCallback != null) {
+            iDataUpdateCallback.onItemStarred(mMovies.get(pos), isStarred);
+        }
+    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieHolder.java b/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieHolder.java
index 9ceff5c..21ae9cb 100755
--- a/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieHolder.java
+++ b/app/src/main/java/com/ellison/eigakensaku/ui/view/MovieHolder.java
@@ -10,17 +10,22 @@ import com.ellison.eigakensaku.constants.Constants;
 import com.ellison.eigakensaku.ui.animator.AnimatorShowerImplement;
 import com.ellison.eigakensaku.ui.animator.AnimatorType;
 import com.ellison.eigakensaku.ui.animator.IAnimatorCallback;
-import com.ellison.eigakensaku.ui.animator.IAnimatorShower;
+import com.ellison.eigakensaku.ui.touch.ISwipeDataSync;
 import com.ellison.eigakensaku.ui.touch.ISwipeGestureListener;
 import com.ellison.eigakensaku.utils.Utils;
 
 import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.RecyclerView;
+
+import java.lang.ref.WeakReference;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
 
 public class MovieHolder extends RecyclerView.ViewHolder implements ISwipeGestureListener {
     private static final String TAG = MovieHolder.class.getSimpleName();
+    private WeakReference<ISwipeDataSync> swipeDataSync;
+    private boolean isStarred = false;
 
     @BindView(R.id.iv)
     View itemView;
@@ -28,6 +33,8 @@ public class MovieHolder extends RecyclerView.ViewHolder implements ISwipeGestur
     TextView title;
     @BindView(R.id.iv_post)
     ImageView post;
+    @BindView(R.id.iv_star)
+    ImageView star;
     @BindView(R.id.tv_year)
     TextView year;
     @BindView(R.id.tv_type)
@@ -37,18 +44,16 @@ public class MovieHolder extends RecyclerView.ViewHolder implements ISwipeGestur
     @BindView(R.id.item_menu_icon)
     ImageView star_icon;
 
-    private boolean isStarred = false;
-
-    public MovieHolder(@NonNull View itemView) {
+    public MovieHolder(@NonNull View itemView, ISwipeDataSync sync) {
         super(itemView);
         ButterKnife.bind(this, itemView);
+        swipeDataSync = new WeakReference<>(sync);
     }
 
     @Override
     public void onSwipeTipShowing(float dX, float dY) {
-        final int itemWidth = itemView.getWidth();
         final int menuWidth = ((ViewGroup) itemView).getChildAt(1).getWidth();
-        Utils.logDebug(TAG, "onStarMenuShowing() itemWidth:" + itemWidth + " menuWidth:" + menuWidth);
+        Utils.logDebug(TAG, "onStarMenuShowing() itemWidth:" + itemView.getWidth() + " menuWidth:" + menuWidth);
 
         if (Math.abs(dX) <= menuWidth) {
             // Scroll until view totally show
@@ -61,10 +66,14 @@ public class MovieHolder extends RecyclerView.ViewHolder implements ISwipeGestur
 
     @Override
     public void onSwipeMenuShowing(ISwipeMenuCallback callback) {
-        isStarred = !isStarred;
+        synchronized (this) {
+            isStarred = !isStarred;
+        }
+
         updateTextView(star_tip, isStarred ? R.string.text_rv_menu_type_content_unstar : R.string.text_rv_menu_type_content_star);
         updateVisibility(star_tip, View.INVISIBLE);
         updateVisibility(star_icon, View.VISIBLE);
+
         showStarAnimator(star_icon, isStarred, new IAnimatorCallback() {
             @Override
             public void onAnimationStart() {
@@ -73,11 +82,19 @@ public class MovieHolder extends RecyclerView.ViewHolder implements ISwipeGestur
             @Override
             public void onAnimationEnd() {
                 if (callback != null) {
+                    Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd SCROLL RESET");
                     viewScrollTo(itemView, 0, 0);
-                    Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd onSwipeMenuShown SCROLL RESET");
 
-                    Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd onSwipeMenuShown CALLBACK");
+                    Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd ANIMATION RESET");
                     callback.onSwipeMenuShown();
+
+                    Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd VISIBILITY UPDATE");
+                    updateVisibility(star, isStarred ? View.VISIBLE : View.INVISIBLE);
+
+                    if (swipeDataSync.get() != null) {
+                        Utils.logDebug(TAG, "showStarAnimator() onAnimationEnd STAR SYNC");
+                        swipeDataSync.get().onItemStarred(getAdapterPosition(), isStarred);
+                    }
                 }
             }
         });
@@ -97,6 +114,11 @@ public class MovieHolder extends RecyclerView.ViewHolder implements ISwipeGestur
         updateVisibility(star_icon, View.INVISIBLE);
     }
 
+    public synchronized void syncStarState(boolean isStarred) {
+        this.isStarred = isStarred;
+        updateVisibility(star, isStarred ? View.VISIBLE : View.INVISIBLE);
+    }
+
     private void updateTextView(TextView view, int id) {
         if (view == null) {
             return;
@@ -136,4 +158,4 @@ public class MovieHolder extends RecyclerView.ViewHolder implements ISwipeGestur
         Utils.logDebug(TAG, "updateVisibility() view:" + view + " visibility:" + (visibility == View.VISIBLE ? "VISIBLE" : " INVISIBLE"));
         view.setVisibility(visibility);
     }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/ellison/eigakensaku/utils/Utils.java b/app/src/main/java/com/ellison/eigakensaku/utils/Utils.java
index 4e1d0f7..6173411 100755
--- a/app/src/main/java/com/ellison/eigakensaku/utils/Utils.java
+++ b/app/src/main/java/com/ellison/eigakensaku/utils/Utils.java
@@ -34,6 +34,10 @@ public class Utils {
     }
 
     public static void showAlertDialog(Context context, String message) {
+        if (context == null) {
+            return;
+        }
+
         if (!((Activity) context).isFinishing()) {
             AlertDialog dialog = new AlertDialog.Builder(context)
                     .setMessage(message)
@@ -120,6 +124,10 @@ public class Utils {
         Log.e(tag, message);
     }
 
+    public static void logError(String tag, String message, Throwable throwable) {
+        Log.e(tag, message, throwable);
+    }
+
     public static void logDebug(String tag, String message) {
         if (Constants.DEBUGGABLE) {
             Log.d(tag, message);
diff --git a/app/src/main/res/drawable/iv_starred.xml b/app/src/main/res/drawable/iv_starred.xml
new file mode 100755
index 0000000..ed74fec
--- /dev/null
+++ b/app/src/main/res/drawable/iv_starred.xml
@@ -0,0 +1,11 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="200dp"
+    android:height="200dp"
+    android:viewportWidth="1024"
+    android:viewportHeight="1024">
+  <path
+      android:strokeColor="#FFFFFFFF"
+      android:strokeWidth="60"
+      android:fillColor="#ffffbb33"
+      android:pathData="M335.01,916.63c-35.91,22.31 -82.88,10.77 -104.69,-25.56a77.33,77.33 0,0 1,-8.96 -57.43l46.49,-198.24a13.14,13.14 0,0 0,-4.02 -12.86l-152.16,-132.59c-31.61,-27.52 -35.25,-75.65 -8.23,-107.73a75.68,75.68 0,0 1,51.73 -26.75L354.85,339.2c4.35,-0.36 8.25,-3.23 10.03,-7.59l76.94,-188.17c16.03,-39.2 60.62,-57.92 99.52,-41.46a76.31,76.31 0,0 1,40.83 41.46l76.94,188.16c1.78,4.37 5.67,7.25 10.03,7.61l199.71,16.28c41.88,3.41 72.89,40.46 69.57,82.52a76.94,76.94 0,0 1,-26.08 51.98l-152.16,132.59c-3.54,3.08 -5.14,8.07 -4.02,12.85l46.49,198.24c9.62,41.01 -15.36,82.34 -56.14,92.22a75.29,75.29 0,0 1,-57.53 -9.24l-170.98,-106.24a11.3,11.3 0,0 0,-12.01 0l-170.99,106.24z"/>
+</vector>
diff --git a/app/src/main/res/layout/content_rv_item_layout.xml b/app/src/main/res/layout/content_rv_item_layout.xml
index ab9f726..60a24b1 100755
--- a/app/src/main/res/layout/content_rv_item_layout.xml
+++ b/app/src/main/res/layout/content_rv_item_layout.xml
@@ -20,15 +20,29 @@
             android:layout_height="wrap_content"
             android:orientation="vertical">
 
-            <ImageView
-                android:id="@+id/iv_post"
+            <FrameLayout
                 android:layout_width="match_parent"
-                android:layout_height="@dimen/rv_item_post_height"
-                android:adjustViewBounds="true"
-                android:contentDescription="@string/post_cd"
-                android:scaleType="fitXY"
-                android:src="@drawable/rv_item_post_for_test"
-                tools:srcCompat="@drawable/rv_item_post_for_test" />
+                android:layout_height="wrap_content">
+                <ImageView
+                    android:id="@+id/iv_post"
+                    android:layout_width="match_parent"
+                    android:layout_height="@dimen/rv_item_post_height"
+                    android:adjustViewBounds="true"
+                    android:contentDescription="@string/post_cd"
+                    android:scaleType="fitXY"
+                    android:src="@drawable/rv_item_post_for_test"
+                    tools:srcCompat="@drawable/rv_item_post_for_test" />
+                <ImageView
+                    android:id="@+id/iv_star"
+                    android:layout_width="@dimen/rv_item_star_size"
+                    android:layout_height="@dimen/rv_item_star_size"
+                    android:layout_gravity="right|top"
+                    android:layout_marginTop="@dimen/rv_item_star_margin"
+                    android:layout_marginRight="@dimen/rv_item_star_margin"
+                    android:src="@drawable/iv_starred"
+                    tools:srcCompat="@drawable/iv_starred"
+                    android:visibility="invisible" />
+            </FrameLayout>
 
             <LinearLayout
                 android:layout_width="match_parent"
@@ -88,16 +102,16 @@
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_gravity="center"
-            android:textColor="@android:color/white"
             android:text="@string/text_rv_menu_type_content_star"
+            android:textColor="@android:color/white"
             tools:text="@string/text_rv_menu_type_for_test" />
         <ImageView
             android:id="@+id/item_menu_icon"
             android:layout_width="wrap_content"
             android:layout_height="30dp"
-            android:src="@drawable/ic_frag_star_new_like"
             android:layout_gravity="center"
             android:scaleType="centerInside"
+            android:src="@drawable/ic_frag_star_new_like"
             android:visibility="invisible"
             />
     </FrameLayout>
diff --git a/app/src/main/res/layout/fragment_star.xml b/app/src/main/res/layout/fragment_star.xml
index 5b49e16..ff6b6ee 100755
--- a/app/src/main/res/layout/fragment_star.xml
+++ b/app/src/main/res/layout/fragment_star.xml
@@ -6,17 +6,11 @@
     android:layout_height="match_parent"
     tools:context=".ui.star.StarFragment">
 
-    <TextView
-        android:id="@+id/text_star"
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/star_frag_rv"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:layout_marginEnd="8dp"
-        android:layout_marginStart="8dp"
-        android:layout_marginTop="8dp"
-        android:textAlignment="center"
-        android:textSize="20sp"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        android:layout_height="match_parent"
+        tools:itemCount="8"
+        tools:listitem="@layout/starred_rv_item_layout"
+        />
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/starred_rv_item_layout.xml b/app/src/main/res/layout/starred_rv_item_layout.xml
new file mode 100755
index 0000000..28ca752
--- /dev/null
+++ b/app/src/main/res/layout/starred_rv_item_layout.xml
@@ -0,0 +1,157 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/star_main_content"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_margin="@dimen/rv_item_margin"
+    android:background="@color/design_default_color_primary"
+    android:orientation="horizontal">
+
+    <com.ellison.eigakensaku.ui.view.MovieCard
+        android:id="@+id/star_cv"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/design_default_color_primary"
+        app:cardCornerRadius="@dimen/rv_item_post_radius">
+
+        <LinearLayout
+            android:id="@+id/star_post_content"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:background="@color/colorSwipeRefreshBg"
+            android:orientation="horizontal">
+
+            <ImageView
+                android:id="@+id/star_iv_post"
+                android:layout_width="@dimen/rv_item_post_width_star"
+                android:layout_height="@dimen/rv_item_post_height_star"
+                android:adjustViewBounds="true"
+                android:contentDescription="@string/post_cd"
+                android:scaleType="fitXY"
+                android:src="@drawable/rv_item_post_for_test"
+                tools:srcCompat="@drawable/rv_item_post_for_test" />
+
+            <LinearLayout
+                android:layout_margin="4dp"
+                android:id="@+id/star_text_content"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:orientation="vertical">
+
+                <TextView
+                    android:id="@+id/star_tv_title"
+                    android:layout_width="match_parent"
+                    android:layout_height="0dp"
+                    android:layout_weight="2"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:gravity="center_vertical"
+                    android:textColor="@android:color/background_dark"
+                    android:textSize="@dimen/rv_item_title_size_star"
+                    android:textStyle="bold"
+                    tools:text="@string/text_rv_item_title_for_test" />
+
+                <RelativeLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="0dp"
+                    android:layout_weight="1"
+                    android:padding="2dp"
+                    android:orientation="horizontal">
+
+                    <TextView
+                        android:id="@+id/star_tv_year"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:textColor="@android:color/background_dark"
+                        android:textSize="@dimen/rv_item_year_size_star"
+                        android:textStyle="italic"
+                        tools:text="@string/text_rv_item_year_for_test" />
+
+                    <TextView
+                        android:id="@+id/star_tv_type"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_alignParentRight="true"
+                        android:textColor="@android:color/background_dark"
+                        android:textSize="@dimen/rv_item_type_size_star"
+                        android:textStyle="italic"
+                        tools:text="@string/text_rv_item_type_for_test" />
+                </RelativeLayout>
+
+                <RelativeLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="0dp"
+                    android:layout_weight="1"
+                    android:padding="2dp"
+                    android:orientation="horizontal">
+
+                    <TextView
+                        android:id="@+id/star_tv_actor"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:ellipsize="end"
+                        android:singleLine="true"
+                        android:textColor="@android:color/background_dark"
+                        android:layout_gravity="center"
+                        android:textStyle="italic"
+                        android:textSize="@dimen/rv_item_actor_size_star"
+                        tools:text="@string/text_rv_item_actor_for_test" />
+
+                    <TextView
+                        android:id="@+id/star_tv_country"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:ellipsize="end"
+                        android:singleLine="true"
+                        android:textColor="@android:color/background_dark"
+                        android:layout_alignParentRight="true"
+                        android:layout_gravity="center"
+                        android:textStyle="italic"
+                        android:textSize="@dimen/rv_item_country_size_star"
+                        tools:text="@string/text_rv_item_country_for_test" />
+                </RelativeLayout>
+
+                <TextView
+                    android:id="@+id/star_tv_info"
+                    android:layout_width="match_parent"
+                    android:layout_height="0dp"
+                    android:layout_weight="3"
+                    android:ellipsize="end"
+                    android:lines="3"
+                    android:textSize="@dimen/rv_item_info_size_star"
+                    android:textColor="@android:color/background_dark"
+                    android:textStyle="italic"
+                    tools:text="@string/text_rv_item_info_for_test" />
+            </LinearLayout>
+
+        </LinearLayout>
+    </com.ellison.eigakensaku.ui.view.MovieCard>
+
+    <FrameLayout
+        android:id="@+id/item_remove_menu"
+        android:layout_width="100dp"
+        android:layout_height="match_parent"
+        android:background="@android:color/holo_orange_light">
+
+        <TextView
+            android:id="@+id/star_remove_tip"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:text="@string/text_rv_menu_type_starred_remove"
+            android:textColor="@android:color/white"
+            tools:text="@string/text_rv_menu_type_starred_remove" />
+
+        <ImageView
+            android:id="@+id/star_remove_icon"
+            android:layout_width="wrap_content"
+            android:layout_height="30dp"
+            android:layout_gravity="center"
+            android:scaleType="centerInside"
+            android:src="@android:drawable/ic_delete"
+            android:visibility="invisible" />
+    </FrameLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/values/dimens.xml b/app/src/main/res/values/dimens.xml
index 58ecc8e..79dbd4d 100755
--- a/app/src/main/res/values/dimens.xml
+++ b/app/src/main/res/values/dimens.xml
@@ -12,10 +12,23 @@
     <dimen name="rv_item_post_width">140dp</dimen>
     <dimen name="rv_item_post_height">165dp</dimen>
 
+    <dimen name="rv_item_star_size">20dp</dimen>
+    <dimen name="rv_item_star_margin">5dp</dimen>
+
     <dimen name="rv_item_title_size">15sp</dimen>
     <dimen name="rv_item_year_size">13sp</dimen>
     <dimen name="rv_item_type_size">13sp</dimen>
 
+    <dimen name="rv_item_post_width_star">70dp</dimen>
+    <dimen name="rv_item_post_height_star">85dp</dimen>
+
+    <dimen name="rv_item_title_size_star">25sp</dimen>
+    <dimen name="rv_item_year_size_star">13sp</dimen>
+    <dimen name="rv_item_type_size_star">13sp</dimen>
+    <dimen name="rv_item_actor_size_star">15sp</dimen>
+    <dimen name="rv_item_country_size_star">15sp</dimen>
+    <dimen name="rv_item_info_size_star">19sp</dimen>
+
     <dimen name="rv_item_layout_size">120dp</dimen>
     <dimen name="rv_item_load_size">18sp</dimen>
 
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index c2cabed..3155533 100755
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -26,10 +26,15 @@
     <string name="text_rv_item_type_for_test">Magical</string>
     <string name="text_rv_item_load_for_test">Loading</string>
     <string name="text_rv_menu_type_for_test">Star</string>
+    <string name="text_rv_item_actor_for_test">Daniel/Emma/Jet...</string>
+    <string name="text_rv_item_country_for_test">England</string>
+    <string name="text_rv_item_info_for_test">A doze of students played at a agic academy belongs to England.</string>
 
     <string name="text_rv_menu_type_content_star">Star</string>
     <string name="text_rv_menu_type_content_unstar">Unstar</string>
 
+    <string name="text_rv_menu_type_starred_remove">Unstar</string>
+
     <string name="text_rv_item_load">Loading more</string>
     <string name="text_rv_item_load_end">No more results</string>
     <string name="text_keyword_empty">Please enter a keyword.</string>
